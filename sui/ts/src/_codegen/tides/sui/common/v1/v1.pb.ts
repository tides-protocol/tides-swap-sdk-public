// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: tides/sui/common/v1/v1.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

/**
 * MarginAccountType defines the different types of margin accounts supported by the Tides protocol.
 * Each type represents a different underlying lending/borrowing infrastructure.
 */
export enum MarginAccountType {
  /**
   * MARGIN_ACCOUNT_TYPE_UNSPECIFIED - Unspecified margin account type. This should not be used in production.
   * Reserved for uninitialized or invalid states.
   */
  MARGIN_ACCOUNT_TYPE_UNSPECIFIED = 0,
  /** MARGIN_ACCOUNT_TYPE_NATIVE - Native margin account type using Tides' own lending pool infrastructure. */
  MARGIN_ACCOUNT_TYPE_NATIVE = 1,
  /** MARGIN_ACCOUNT_TYPE_SUILEND - Suilend margin account type integrating with the Suilend lending protocol. */
  MARGIN_ACCOUNT_TYPE_SUILEND = 2,
  UNRECOGNIZED = -1,
}

export function marginAccountTypeFromJSON(object: any): MarginAccountType {
  switch (object) {
    case 0:
    case "MARGIN_ACCOUNT_TYPE_UNSPECIFIED":
      return MarginAccountType.MARGIN_ACCOUNT_TYPE_UNSPECIFIED;
    case 1:
    case "MARGIN_ACCOUNT_TYPE_NATIVE":
      return MarginAccountType.MARGIN_ACCOUNT_TYPE_NATIVE;
    case 2:
    case "MARGIN_ACCOUNT_TYPE_SUILEND":
      return MarginAccountType.MARGIN_ACCOUNT_TYPE_SUILEND;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MarginAccountType.UNRECOGNIZED;
  }
}

export function marginAccountTypeToJSON(object: MarginAccountType): string {
  switch (object) {
    case MarginAccountType.MARGIN_ACCOUNT_TYPE_UNSPECIFIED:
      return "MARGIN_ACCOUNT_TYPE_UNSPECIFIED";
    case MarginAccountType.MARGIN_ACCOUNT_TYPE_NATIVE:
      return "MARGIN_ACCOUNT_TYPE_NATIVE";
    case MarginAccountType.MARGIN_ACCOUNT_TYPE_SUILEND:
      return "MARGIN_ACCOUNT_TYPE_SUILEND";
    case MarginAccountType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * DeploymentInfo contains the essential object IDs for a Tides protocol deployment on Sui.
 * This information is used to identify and interact with the core protocol components.
 */
export interface DeploymentInfo {
  /** The package object ID of the main Tides protocol package. */
  package: Uint8Array;
  /** The global info object ID containing protocol-wide configuration and state. */
  globalInfo: Uint8Array;
  /** The admin capability object ID used for protocol administration. */
  adminCap: Uint8Array;
  /** The risk parameters object ID containing lending and borrowing risk configurations. */
  riskParams: Uint8Array;
  /** The trusted push oracle object ID for price feeds. */
  trustedPushOracle: Uint8Array;
  /** The trusted push oracle capability object ID for oracle administration. */
  trustedPushOracleCap: Uint8Array;
  /** The lending pool registry object ID managing all lending pools. */
  lendingPoolRegistry: Uint8Array;
  /** The future tokens registry object ID managing future token contracts. */
  futureTokensRegistry: Uint8Array;
}

/** SharedObject defines an object which is shared. */
export interface SharedObject {
  /** the unique id of the object. */
  id: Uint8Array;
  /** when it was shared. */
  initialSharedVersion: bigint;
}

export interface AssetInfo {
  typeTag: string;
}

function createBaseDeploymentInfo(): DeploymentInfo {
  return {
    package: new Uint8Array(0),
    globalInfo: new Uint8Array(0),
    adminCap: new Uint8Array(0),
    riskParams: new Uint8Array(0),
    trustedPushOracle: new Uint8Array(0),
    trustedPushOracleCap: new Uint8Array(0),
    lendingPoolRegistry: new Uint8Array(0),
    futureTokensRegistry: new Uint8Array(0),
  };
}

export const DeploymentInfo: MessageFns<DeploymentInfo> = {
  encode(message: DeploymentInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.package.length !== 0) {
      writer.uint32(10).bytes(message.package);
    }
    if (message.globalInfo.length !== 0) {
      writer.uint32(18).bytes(message.globalInfo);
    }
    if (message.adminCap.length !== 0) {
      writer.uint32(26).bytes(message.adminCap);
    }
    if (message.riskParams.length !== 0) {
      writer.uint32(34).bytes(message.riskParams);
    }
    if (message.trustedPushOracle.length !== 0) {
      writer.uint32(42).bytes(message.trustedPushOracle);
    }
    if (message.trustedPushOracleCap.length !== 0) {
      writer.uint32(50).bytes(message.trustedPushOracleCap);
    }
    if (message.lendingPoolRegistry.length !== 0) {
      writer.uint32(58).bytes(message.lendingPoolRegistry);
    }
    if (message.futureTokensRegistry.length !== 0) {
      writer.uint32(66).bytes(message.futureTokensRegistry);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeploymentInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeploymentInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.package = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.globalInfo = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.adminCap = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.riskParams = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.trustedPushOracle = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.trustedPushOracleCap = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.lendingPoolRegistry = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.futureTokensRegistry = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeploymentInfo {
    return {
      package: isSet(object.package) ? bytesFromBase64(object.package) : new Uint8Array(0),
      globalInfo: isSet(object.globalInfo) ? bytesFromBase64(object.globalInfo) : new Uint8Array(0),
      adminCap: isSet(object.adminCap) ? bytesFromBase64(object.adminCap) : new Uint8Array(0),
      riskParams: isSet(object.riskParams) ? bytesFromBase64(object.riskParams) : new Uint8Array(0),
      trustedPushOracle: isSet(object.trustedPushOracle)
        ? bytesFromBase64(object.trustedPushOracle)
        : new Uint8Array(0),
      trustedPushOracleCap: isSet(object.trustedPushOracleCap)
        ? bytesFromBase64(object.trustedPushOracleCap)
        : new Uint8Array(0),
      lendingPoolRegistry: isSet(object.lendingPoolRegistry)
        ? bytesFromBase64(object.lendingPoolRegistry)
        : new Uint8Array(0),
      futureTokensRegistry: isSet(object.futureTokensRegistry)
        ? bytesFromBase64(object.futureTokensRegistry)
        : new Uint8Array(0),
    };
  },

  toJSON(message: DeploymentInfo): unknown {
    const obj: any = {};
    if (message.package.length !== 0) {
      obj.package = base64FromBytes(message.package);
    }
    if (message.globalInfo.length !== 0) {
      obj.globalInfo = base64FromBytes(message.globalInfo);
    }
    if (message.adminCap.length !== 0) {
      obj.adminCap = base64FromBytes(message.adminCap);
    }
    if (message.riskParams.length !== 0) {
      obj.riskParams = base64FromBytes(message.riskParams);
    }
    if (message.trustedPushOracle.length !== 0) {
      obj.trustedPushOracle = base64FromBytes(message.trustedPushOracle);
    }
    if (message.trustedPushOracleCap.length !== 0) {
      obj.trustedPushOracleCap = base64FromBytes(message.trustedPushOracleCap);
    }
    if (message.lendingPoolRegistry.length !== 0) {
      obj.lendingPoolRegistry = base64FromBytes(message.lendingPoolRegistry);
    }
    if (message.futureTokensRegistry.length !== 0) {
      obj.futureTokensRegistry = base64FromBytes(message.futureTokensRegistry);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeploymentInfo>, I>>(base?: I): DeploymentInfo {
    return DeploymentInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeploymentInfo>, I>>(object: I): DeploymentInfo {
    const message = createBaseDeploymentInfo();
    message.package = object.package ?? new Uint8Array(0);
    message.globalInfo = object.globalInfo ?? new Uint8Array(0);
    message.adminCap = object.adminCap ?? new Uint8Array(0);
    message.riskParams = object.riskParams ?? new Uint8Array(0);
    message.trustedPushOracle = object.trustedPushOracle ?? new Uint8Array(0);
    message.trustedPushOracleCap = object.trustedPushOracleCap ?? new Uint8Array(0);
    message.lendingPoolRegistry = object.lendingPoolRegistry ?? new Uint8Array(0);
    message.futureTokensRegistry = object.futureTokensRegistry ?? new Uint8Array(0);
    return message;
  },
};

function createBaseSharedObject(): SharedObject {
  return { id: new Uint8Array(0), initialSharedVersion: 0n };
}

export const SharedObject: MessageFns<SharedObject> = {
  encode(message: SharedObject, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id.length !== 0) {
      writer.uint32(10).bytes(message.id);
    }
    if (message.initialSharedVersion !== 0n) {
      if (BigInt.asUintN(64, message.initialSharedVersion) !== message.initialSharedVersion) {
        throw new globalThis.Error("value provided for field message.initialSharedVersion of type uint64 too large");
      }
      writer.uint32(16).uint64(message.initialSharedVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SharedObject {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSharedObject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.initialSharedVersion = reader.uint64() as bigint;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SharedObject {
    return {
      id: isSet(object.id) ? bytesFromBase64(object.id) : new Uint8Array(0),
      initialSharedVersion: isSet(object.initialSharedVersion) ? BigInt(object.initialSharedVersion) : 0n,
    };
  },

  toJSON(message: SharedObject): unknown {
    const obj: any = {};
    if (message.id.length !== 0) {
      obj.id = base64FromBytes(message.id);
    }
    if (message.initialSharedVersion !== 0n) {
      obj.initialSharedVersion = message.initialSharedVersion.toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SharedObject>, I>>(base?: I): SharedObject {
    return SharedObject.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SharedObject>, I>>(object: I): SharedObject {
    const message = createBaseSharedObject();
    message.id = object.id ?? new Uint8Array(0);
    message.initialSharedVersion = object.initialSharedVersion ?? 0n;
    return message;
  },
};

function createBaseAssetInfo(): AssetInfo {
  return { typeTag: "" };
}

export const AssetInfo: MessageFns<AssetInfo> = {
  encode(message: AssetInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.typeTag !== "") {
      writer.uint32(10).string(message.typeTag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssetInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssetInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.typeTag = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssetInfo {
    return { typeTag: isSet(object.typeTag) ? globalThis.String(object.typeTag) : "" };
  },

  toJSON(message: AssetInfo): unknown {
    const obj: any = {};
    if (message.typeTag !== "") {
      obj.typeTag = message.typeTag;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssetInfo>, I>>(base?: I): AssetInfo {
    return AssetInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssetInfo>, I>>(object: I): AssetInfo {
    const message = createBaseAssetInfo();
    message.typeTag = object.typeTag ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  const bin = globalThis.atob(b64);
  const arr = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; ++i) {
    arr[i] = bin.charCodeAt(i);
  }
  return arr;
}

function base64FromBytes(arr: Uint8Array): string {
  const bin: string[] = [];
  arr.forEach((byte) => {
    bin.push(globalThis.String.fromCharCode(byte));
  });
  return globalThis.btoa(bin.join(""));
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
